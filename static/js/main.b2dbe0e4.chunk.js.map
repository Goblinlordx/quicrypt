{"version":3,"sources":["crypto.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["bufToAlpha","buf","arr","Array","from","Uint8Array","btoa","map","byte","String","fromCharCode","join","alphaToBuf","str","atob","split","ch","charCodeAt","encrypt","password","pt","a","crypto","subtle","digest","TextEncoder","encode","trim","pwHash","iv","getRandomValues","alg","name","importKey","key","ctBuf","ivStr","ctStr","decrypt","ctRaw","pwUtf8","ct","ptBuf","TextDecoder","decode","Error","App","useState","setPt","setPassword","setCT","useEffect","useEncrypt","ct2","setCt2","password2","setPassword2","setPT","err","setErr","useDecrypt","pt2","className","onInput","e","currentTarget","value","disabled","message","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.b2dbe0e4.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst bufToAlpha = (buf: ArrayBuffer) => {\n  const arr = Array.from(new Uint8Array(buf));\n  return btoa(arr.map((byte) => String.fromCharCode(byte)).join(\"\"));\n};\n\nconst alphaToBuf = (str: string) =>\n  new Uint8Array(atob(str).split('').map((ch) => ch.charCodeAt(0)));\n\nconst encrypt = async (password: string, pt: string) => {\n  const pwHash = await crypto.subtle.digest(\n    \"SHA-256\",\n    new TextEncoder().encode(password.trim())\n  );\n\n  const iv = crypto.getRandomValues(new Uint8Array(12));\n  const alg = { name: \"AES-GCM\", iv };\n\n  const key = await crypto.subtle.importKey(\"raw\", pwHash, alg, false, [\n    \"encrypt\",\n  ]);\n\n  const ctBuf = await crypto.subtle.encrypt(\n    alg,\n    key,\n    new TextEncoder().encode(pt)\n  );\n\n  const ivStr = bufToAlpha(iv);\n  const ctStr = bufToAlpha(ctBuf);\n\n  return `${ivStr}$${ctStr}`;\n};\n\nconst decrypt = async (password: string, ctRaw: string): Promise<[string, null | Error]>  => {\n  try {\n    const pwUtf8 = new TextEncoder().encode(password.trim());\n    const pwHash = await crypto.subtle.digest(\"SHA-256\", pwUtf8);\n\n    const [ivStr = \"\", ctStr = \"\"] = ctRaw.split(\"$\");\n    const iv = alphaToBuf(ivStr);\n    const ct = alphaToBuf(ctStr);\n\n    const alg = { name: \"AES-GCM\", iv };\n\n    const key = await crypto.subtle.importKey(\"raw\", pwHash, alg, false, [\n      \"decrypt\",\n    ]);\n\n    const ptBuf = await crypto.subtle.decrypt(alg, key, ct);\n    return [new TextDecoder().decode(ptBuf), null]\n  } catch (err) {\n    return ['', new Error('Invalid ciphertext or password')]\n  }\n};\n\nexport const useEncrypt = (password: string, pt: string) => {\n  const [ct, setCT] = useState(\"\");\n  useEffect(() => {\n    void (async () => {\n      setCT(await encrypt(password, pt));\n    })();\n  }, [password, pt]);\n\n  return ct;\n};\n\n\nexport const useDecrypt = (password: string, ct: string) => {\n  const [pt, setPT] = useState(\"\");\n  const [err, setErr] = useState<null | Error>(null);\n  useEffect(() => {\n    void (async () => {\n      const [pt, err] = await decrypt(password, ct)\n      setPT(pt);\n      setErr(err)\n    })();\n  }, [password, ct]);\n\n  return [pt, err] as [string, null | Error];\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { useDecrypt, useEncrypt } from './crypto';\n\nfunction App() {\n  const [pt, setPt] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const ct = useEncrypt(password, pt)\n\n  const [ct2, setCt2] = useState(\"\");\n  const [password2, setPassword2] = useState(\"\");\n  const [pt2, err] = useDecrypt(password2, ct2)\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <textarea onInput={(e) => setPt(e.currentTarget.value)}></textarea>\n          <textarea\n            onInput={(e) => setPassword(e.currentTarget.value)}\n          ></textarea>\n          <textarea disabled value={ct}></textarea>\n        </div>\n        <hr />\n        <div>\n          <textarea onInput={(e) => setCt2(e.currentTarget.value)}></textarea>\n          <textarea\n            onInput={(e) => setPassword2(e.currentTarget.value)}\n          ></textarea>\n          <textarea disabled value={pt2}></textarea>\n          <div>{err?.message}</div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}