{"version":3,"sources":["AboutView.tsx","crypto.tsx","DecryptView.tsx","toClipboard.tsx","EncryptView.tsx","Routing.tsx","Header.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["AboutView","bufToAlpha","buf","arr","Array","from","Uint8Array","padSize","length","str","concat","fill","map","byte","String","fromCharCode","join","btoa","alphaToBuf","paddedArr","atob","split","charCodeAt","slice","ch","encrypt","password","pt","a","crypto","subtle","digest","TextEncoder","encode","trim","pwHash","iv","getRandomValues","alg","name","importKey","key","ctBuf","ivStr","ctStr","decrypt","ctRaw","pwUtf8","ct","ptBuf","TextDecoder","decode","Error","DecryptView","queryCt","URLSearchParams","useLocation","search","get","history","useHistory","match","useRouteMatch","useState","decodeURIComponent","_setCt","setCt","fn","path","replace","query","withQueryReset","setPassword","setPT","err","setErr","useEffect","useDecrypt","className","onInput","e","currentTarget","value","disabled","message","toClipboard","clip","ClipboardJS","success","Promise","res","rej","on","console","error","destroy","EncryptView","setPt","setCT","useEncrypt","decryptPath","window","location","href","encodeURIComponent","type","id","data-clipboard-text","onClick","to","Routing","component","Header","App","Boolean","hostname","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.ce869859.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const AboutView = () => {\n  return <>About</>;\n};\n","import { useEffect, useState } from \"react\";\n\nconst BLOCK_BYTE_SIZE = 6;\n\nconst bufToAlpha = (buf: ArrayBuffer) => {\n  const arr = Array.from(new Uint8Array(buf));\n  const padSize = BLOCK_BYTE_SIZE - (arr.length % BLOCK_BYTE_SIZE);\n  const paddedArr = arr.concat(new Array(padSize).fill(padSize));\n  const str = paddedArr.map((byte) => String.fromCharCode(byte)).join(\"\");\n  return btoa(str);\n};\n\nconst alphaToBuf = (str: string) => {\n  const paddedArr = atob(str).split(\"\");\n  const padSize = paddedArr[paddedArr.length - 1].charCodeAt(0);\n  const isPadded = padSize > 0 && padSize <= BLOCK_BYTE_SIZE;\n  const arr = isPadded\n    ? paddedArr.slice(0, paddedArr.length - padSize)\n    : paddedArr;\n\n  return new Uint8Array(arr.map((ch) => ch.charCodeAt(0)));\n};\n\nconst encrypt = async (password: string, pt: string) => {\n  const pwHash = await crypto.subtle.digest(\n    \"SHA-256\",\n    new TextEncoder().encode(password.trim())\n  );\n\n  const iv = crypto.getRandomValues(new Uint8Array(12));\n  const alg = { name: \"AES-GCM\", iv };\n\n  const key = await crypto.subtle.importKey(\"raw\", pwHash, alg, false, [\n    \"encrypt\",\n  ]);\n\n  const ctBuf = await crypto.subtle.encrypt(\n    alg,\n    key,\n    new TextEncoder().encode(pt)\n  );\n\n  const ivStr = bufToAlpha(iv);\n  const ctStr = bufToAlpha(ctBuf);\n\n  return `${ivStr}$${ctStr}`;\n};\n\nconst decrypt = async (\n  password: string,\n  ctRaw: string\n): Promise<[string, null | Error]> => {\n  try {\n    const pwUtf8 = new TextEncoder().encode(password.trim());\n    const pwHash = await crypto.subtle.digest(\"SHA-256\", pwUtf8);\n\n    const [ivStr = \"\", ctStr = \"\"] = ctRaw.split(\"$\");\n    const iv = alphaToBuf(ivStr);\n    const ct = alphaToBuf(ctStr);\n\n    const alg = { name: \"AES-GCM\", iv };\n\n    const key = await crypto.subtle.importKey(\"raw\", pwHash, alg, false, [\n      \"decrypt\",\n    ]);\n\n    const ptBuf = await crypto.subtle.decrypt(alg, key, ct);\n    return [new TextDecoder().decode(ptBuf), null];\n  } catch (err) {\n    return [\"\", new Error(\"Invalid ciphertext or password\")];\n  }\n};\n\nexport const useEncrypt = (password: string, pt: string) => {\n  const [ct, setCT] = useState(\"\");\n  useEffect(() => {\n    void (async () => {\n      setCT(await encrypt(password, pt));\n    })();\n  }, [password, pt]);\n\n  return ct;\n};\n\nexport const useDecrypt = (password: string, ct: string) => {\n  const [pt, setPT] = useState(\"\");\n  const [err, setErr] = useState<null | Error>(null);\n  useEffect(() => {\n    void (async () => {\n      const [pt, err] = await decrypt(password, ct);\n      setPT(pt);\n      setErr(err);\n    })();\n  }, [password, ct]);\n\n  return [pt, err] as [string, null | Error];\n};\n","import { useEffect, useState } from \"react\";\nimport { History } from \"history\";\nimport { match, useLocation, useRouteMatch } from \"react-router\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDecrypt } from \"./crypto\";\n\nconst useQuery = () => new URLSearchParams(useLocation().search);\n\nconst withQueryReset = (\n  fn: any,\n  history: History<unknown>,\n  match: match<{}>\n) => {\n  const { path } = match;\n  return (...args: any[]) => {\n    history.replace(path, { query: {} });\n    return fn(...args);\n  };\n};\n\nexport const DecryptView = () => {\n  const queryCt = useQuery().get(\"ct\");\n  const history = useHistory();\n  const match = useRouteMatch();\n\n  const [ct, _setCt] = useState(decodeURIComponent(queryCt || \"\"));\n  const setCt = withQueryReset(_setCt, history, match);\n\n  const [password, setPassword] = useState(\"\");\n  const [pt, err] = useDecrypt(password, ct);\n\n  useEffect(() => {\n    if (!queryCt || ct === queryCt) return;\n    _setCt(decodeURIComponent(queryCt));\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [queryCt]);\n\n  return (\n    <div className=\"flex flex-grow flex-col m-4\">\n      <label className=\"flex flex-col m-4\">\n        <div>CipherText: </div>\n        <textarea\n          className=\"input\"\n          onInput={(e) => setCt(e.currentTarget.value)}\n          value={ct}\n        />\n      </label>\n      <label className=\"flex flex-col m-4\">\n        <div>Password: </div>\n        <textarea\n          className=\"input\"\n          onInput={(e) => setPassword(e.currentTarget.value)}\n          value={password}\n        />\n      </label>\n      <label className=\"flex flex-col flex-grow m-4\">\n        <div>PlainText: </div>\n        {!err && (\n          <textarea\n            className=\"input flex-grow h-20 bg-green-200 bg-opacity-100\"\n            disabled\n            value={pt}\n          />\n        )}\n        {err && (\n          <div className=\"input flex-grow content-center justify-center bg-red-500\">\n            {err?.message}\n          </div>\n        )}\n      </label>\n    </div>\n  );\n};\n","import ClipboardJS from \"clipboard\";\n\nexport const toClipboard = async () => {\n  const clip = new ClipboardJS(\"#copy\");\n  let success = true;\n  try {\n    await new Promise((res, rej) => {\n      clip.on(\"success\", res);\n      clip.on(\"error\", rej);\n    });\n  } catch (err) {\n    console.error(err);\n    success = false;\n  }\n  clip.destroy();\n\n  return success;\n};\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useEncrypt } from \"./crypto\";\nimport { toClipboard } from \"./toClipboard\";\n\nexport const EncryptView = () => {\n  const [pt, setPt] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const ct = useEncrypt(password, pt);\n\n  const decryptPath = `${\n    window.location.href.split(\"#\")[0] || \"\"\n  }#/decrypt?ct=${encodeURIComponent(ct)}`;\n\n  return (\n    <div className=\"flex flex-grow flex-col\">\n      <label className=\"flex flex-grow flex-col m-8\">\n        <div>PlainText: </div>\n        <textarea\n          className=\"input flex-grow\"\n          onInput={(e) => setPt(e.currentTarget.value)}\n        ></textarea>\n      </label>\n      <label className=\"flex flex-col m-8\">\n        <div>Password: </div>\n        <textarea\n          className=\"input\"\n          onInput={(e) => setPassword(e.currentTarget.value)}\n        ></textarea>\n      </label>\n      <label className=\"flex flex-col m-8\">\n        <div>CipherText: </div>\n        <textarea className=\"input\" disabled value={ct}></textarea>\n      </label>\n      <button\n        type=\"button\"\n        id=\"copy\"\n        data-clipboard-text={decryptPath}\n        onClick={toClipboard}\n      >\n        Copy URL\n      </button>\n      <Link to={decryptPath}>Decryption link</Link>\n    </div>\n  );\n};\n","import { Redirect, Route, Switch } from \"react-router\";\nimport { AboutView } from \"./AboutView\";\nimport { DecryptView } from \"./DecryptView\";\nimport { EncryptView } from \"./EncryptView\";\n\nexport const Routing = () => (\n  <Switch>\n    <Route path=\"/encrypt\" component={EncryptView} />\n    <Route path=\"/decrypt\" component={DecryptView} />\n    <Route path=\"/about\" component={AboutView} />\n    <Redirect to=\"/encrypt\" />\n  </Switch>\n);\n","import { Link } from \"react-router-dom\";\n\nexport const Header = () => (\n  <div>\n    <div>Quicrypt</div>\n    <div>\n      <Link to=\"/encrypt\">Encrypt</Link>\n    </div>\n    <div>\n      <Link to=\"/decrypt\">Decrypt</Link>\n    </div>\n    <div>\n      <Link to=\"/about\">About</Link>\n    </div>\n  </div>\n);\n","import \"./styles/base.css\";\n\nimport { Routing } from \"./Routing\";\nimport { Header } from \"./Header\";\n\nexport const App = () => (\n  <div className=\"min-h-screen flex flex-grow flex-col text-gray-300 font-sans\">\n    <Header />\n    <Routing />\n  </div>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n// import './index.css';\nimport { App } from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}